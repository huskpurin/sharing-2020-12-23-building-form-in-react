{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"fb624dc9-4f4e-55e8-81c3-8c47e3ea4dec","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Building Form in React\"), mdx(\"hr\", null), mdx(\"img\", {\n    src: \"https://res.cloudinary.com/practicaldev/image/fetch/s--PR_A1FL4--/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://dev-to-uploads.s3.amazonaws.com/i/tqjxqvub0go6bpwhbwdg.png\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: \"https://foundkit.com/wp-content/uploads/2019/05/Soundcloud-1-1024x594.png\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Form Requirements\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"show input value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"update input value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"validate input value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"show validation results\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"submit input valuse\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"show the submission results\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Encapsulation the Logics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"input values\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"validation\")), mdx(\"hr\", null), mdx(\"h2\", null, \"State Management\"), mdx(\"p\", null, \"global state vs component state\"), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"form state is inherently ephemeral and local -- Dan Abramov\")), mdx(\"hr\", null), mdx(\"h3\", null, \"form libs always export get/set state mathod\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// MyInput.js\\n\\nimport { withFormsy } from 'formsy-react';\\n\\nclass MyInput extends React.Component {\\n  changeValue = (event) => {\\n    this.props.setValue(event.currentTarget.value);\\n  }\\n\\n  render() {\\n    return (\\n      <>\\n        <input onChange={this.changeValue} type=\\\"text\\\" value={this.props.value} />\\n        <span>{this.props.errorMessage}</span>\\n      </>\\n    );\\n  }\\n}\\n\\nexport default withFormsy(MyInput);\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// App.js\\n\\nimport Formsy from 'formsy-react';\\nimport MyInput from './MyInput';\\n\\nexport default class App extends React.Component {\\n  submit = (model) => {\\n    fetch('http://example.com/', {\\n      method: 'post',\\n      body: JSON.stringify(model),\\n    });\\n  }\\n\\n  render() {\\n    return (\\n      <Formsy onSubmit={this.submit}>\\n        <MyInput name=\\\"email\\\" validations=\\\"isEmail\\\" validationError=\\\"This is not a valid email\\\" required />\\n        <button type=\\\"submit\\\">Submit</button>\\n      </Formsy>\\n    );\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"how does formsy save form state?\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"context pattern: provider\\\"\",\n    \"title\": \"\\\"context\",\n    \"pattern:\": true,\n    \"provider\\\"\": true\n  }), \"<Formsy onSubmit={this.submit}>\\n  <MyInput name=\\\"email\\\" validations=\\\"isEmail\\\" validationError=\\\"This is not a valid email\\\" required />\\n  <button type=\\\"submit\\\">Submit</button>\\n</Formsy>\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// Formsy.ts\\nexport class Formsy extends React.Component<FormsyProps, FormsyState> {\\n    // ...\\n    render() {\\n        const { contextValue } = this.state;\\n\\n        return (\\n            <FormsyContext.Provider value={contextValue}>\\n                <form onReset={...} onSubmit={...} {...nonFormsyProps} disabled={false}>\\n                    {children}\\n                </form>\\n            </FormsyContext.Provider>\\n        );\\n    }\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// FormsyContext.ts\\n// ...\\n\\nconst defaultValue = {\\n  attachToForm: throwNoFormsyProvider,\\n  detachFromForm: throwNoFormsyProvider,\\n  isFormDisabled: true,\\n  isValidValue: throwNoFormsyProvider,\\n  validate: throwNoFormsyProvider,\\n  runValidation: throwNoFormsyProvider,\\n};\\n\\nexport default React.createContext<FormsyContextInterface>(defaultValue);\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// withFormsy.tsx\\n\\nexport default function withFormsy(WrappedComponent) {\\n  // ...\\n  class WithFormsyWrapper extends React.Component<T & WrapperProps<V> & FormsyContextInterface, WrapperState<V>> {\\n    return (\\n      <WrappedComponent {...propsForElement} />\\n    );\\n  }\\n\\n  return (props) =>\\n    React.createElement(FormsyContext.Consumer, null, (contextValue) => {\\n      return React.createElement(WithFormsyWrapper, { ...props, ...contextValue });\\n    });\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"save state in the wapper component\\\"\",\n    \"title\": \"\\\"save\",\n    \"state\": true,\n    \"in\": true,\n    \"the\": true,\n    \"wapper\": true,\n    \"component\\\"\": true\n  }), \"// withFormsy.tsx\\nexport default function withFormsy(WrappedComponent) {\\n  class WithFormsyWrapper extends React.Component {\\n    public constructor(props) {\\n      this.state = {\\n        value: props.value,\\n        ...runValidation(this, props.value),\\n      };\\n    }\\n\\n    public getValue = (): V => this.state.value;\\n\\n    public setValue = (value: V, validate = true): void => {\\n      this.setState({ value });\\n    };\\n\\n    public render() {\\n      const propsForElement: T & PassDownProps<V> = {\\n        ...this.props,\\n        errorMessage: this.getErrorMessage(),\\n        setValue: this.setValue,\\n        value: this.getValue(),\\n      };\\n\\n      return React.createElement(WrappedComponent, propsForElement);\\n    }\\n  }\\n\\n  return (props) =>\\n    React.createElement(FormsyContext.Consumer, null, (contextValue) => {\\n      return React.createElement(WithFormsyWrapper, { ...props, ...contextValue });\\n    });\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"save all components into global state\\\"\",\n    \"title\": \"\\\"save\",\n    \"all\": true,\n    \"components\": true,\n    \"into\": true,\n    \"global\": true,\n    \"state\\\"\": true\n  }), \"// withFormsy.tsx\\nexport default function withFormsy(WrappedComponent) {\\n    // ...\\n    class WithFormsyWrapper extends React.Component<T & WrapperProps<V> & FormsyContextInterface, WrapperState<V>> {\\n      public componentDidMount() {\\n        if (!this.props.name) {\\n            throw new Error('Form Input requires a name property when used');\\n        }\\n        this.prpos.attachToForm(this);\\n    }\\n\\n    public componentWillUnmount() {\\n      this.props.detachFromForm(this);\\n    }\\n  }\\n  // ...\\n  return (props) =>\\n    React.createElement(FormsyContext.Consumer, null, (contextValue) => {\\n      return React.createElement(WithFormsyWrapper, { ...props, ...contextValue });\\n    });\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// Formsy.ts\\nexport class Formsy extends React.Component<FormsyProps, FormsyState> {\\n  attachToForm = (component) => {\\n    if (this.inputs.indexOf(component) === -1) {\\n      this.inputs.push(component);\\n    }\\n    // ...\\n  };\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"get model from attached component when form submitted\\\"\",\n    \"title\": \"\\\"get\",\n    \"model\": true,\n    \"from\": true,\n    \"attached\": true,\n    \"component\": true,\n    \"when\": true,\n    \"form\": true,\n    \"submitted\\\"\": true\n  }), \"// Formsy.ts\\nexport class Formsy extends React.Component<FormsyProps, FormsyState> {\\n  submit = (event?: React.SyntheticEvent) => {\\n    // ...\\n    const model = this.getModel();\\n    onSubmit(model, this.resetModel, this.updateInputsWithError, event);\\n    // ...\\n  };\\n\\n  getModel = () => {\\n    const currentValues = this.getCurrentValues();\\n    // https://github.com/formsy/formsy-react/blob/master/API.md#mapping\\n    return this.mapModel(currentValues);\\n  };\\n\\n  getCurrentValues = () =>\\n    this.inputs.reduce((valueAccumulator, component) => {\\n      const {\\n        props: { name },\\n        state: { value },\\n      } = component;\\n      // eslint-disable-next-line no-param-reassign\\n      valueAccumulator[name] = utils.protectAgainstParamReassignment(value);\\n      return valueAccumulator;\\n    }, {});\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Problems\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Formsy\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"states <- n - n ->  views\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"class components might be deprecated\")), mdx(\"h3\", null, \"HOC\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"two HOC could be using the same prop\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a deeply nested tree making it difficult to debug\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to hoist static methods\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Formik: render props\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"BasicExample\\\"\",\n    \"title\": \"\\\"BasicExample\\\"\"\n  }), \"\\nconst BasicExample = () => (\\n  <Formik\\n    initialValues={{ name: 'jared' }}\\n    onSubmit={(values, actions) => { actions.setSubmitting(false) }}\\n  >\\n    {props => (\\n      <form onSubmit={props.handleSubmit}>\\n        <input\\n          type=\\\"text\\\"\\n          onChange={props.handleChange}\\n          onBlur={props.handleBlur}\\n          value={props.values.name}\\n          name=\\\"name\\\"\\n        />\\n        {props.errors.name && <div id=\\\"feedback\\\">{props.errors.name}</div>}\\n        <button type=\\\"submit\\\">Submit</button>\\n      </form>\\n    )}\\n  </Formik>\\n);\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"how formik set/get value\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// formik.tsx\\n\\nexport function Formik(props) {\\n  const formikbag = useFormik<Values>(props);\\n  const { component, children, render, innerRef } = props;\\n\\n  return (\\n    <FormikProvider value={formikbag}>\\n      {component\\n        ? React.createElement(component as any, formikbag)\\n        : render\\n        ? render(formikbag)\\n        : children // children come last, always called\\n        ? isFunction(children)\\n          ? (children as (bag: FormikProps<Values>) => React.ReactNode)(\\n              formikbag as FormikProps<Values>\\n            )\\n          : !isEmptyChildren(children)\\n          ? React.Children.only(children)\\n          : null\\n        : null}\\n    </FormikProvider>\\n  );\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// formik.tsx\\n\\nexport function useFormik({\\n  validateOnChange = true,\\n  validateOnBlur = true,\\n  validateOnMount = false,\\n  isInitialValid,\\n  enableReinitialize = false,\\n  onSubmit,\\n  ...rest\\n}: FormikConfig<Values>) {\\n  // ...\\n  const [state, dispatch] = React.useReducer<\\n    React.Reducer<FormikState<Values>, FormikMessage<Values>>\\n  >(formikReducer, {\\n    values: props.initialValues,\\n    errors: props.initialErrors || emptyErrors,\\n    touched: props.initialTouched || emptyTouched,\\n    status: props.initialStatus,\\n    isSubmitting: false,\\n    isValidating: false,\\n    submitCount: 0,\\n  });\\n\\n  // ...\\n  const ctx = {\\n    ...state,\\n    initialValues: initialValues.current,\\n    handleBlur,\\n    handleChange,\\n    handleSubmit,\\n    setSubmitting,\\n    setValues,\\n    // ...\\n  };\\n\\n  return ctx;\\n}\\n\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Render props\"), mdx(\"h3\", null, \"Good\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The lowest level of indirection\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it\\u2019s clear which component is called and the state is isolated\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No naming collision issues for props, state and class methods\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Render props\"), mdx(\"h3\", null, \"Bad\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"callback hell\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"caution using shouldComponentUpdate\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the render prop might close over data it is unaware of\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Formik: hook\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const SignupForm = () => {\\n  const formik = useFormik({\\n    initialValues: {\\n      firstName: \\\"\\\",\\n      lastName: \\\"\\\",\\n      email: \\\"\\\",\\n    },\\n    onSubmit: values => {\\n      alert(JSON.stringify(values, null, 2))\\n    },\\n  })\\n\\n  return (\\n    <form onSubmit={formik.handleSubmit}>\\n      <input\\n        id=\\\"email\\\"\\n        name=\\\"email\\\"\\n        type=\\\"email\\\"\\n        onChange={formik.handleChange}\\n        value={formik.values.email}\\n      />\\n      <button type=\\\"submit\\\">Submit</button>\\n    </form>\\n  )\\n}\\n\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Hooks\"), mdx(\"h3\", null, \"Good\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"easy to read\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Hooks\"), mdx(\"h3\", null, \"Bad\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"functional component only\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"hard to write test cases\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Adaptation between different patterns\"), mdx(\"h3\", null, \"hook <-> render props <-> HOC\"), mdx(\"hr\", null), mdx(\"p\", null, \"Thank You!\"));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Building Form in React"}},"pageContext":{"matchPath":"/*","id":"fb624dc9-4f4e-55e8-81c3-8c47e3ea4dec","slug":"/sharing-2020-12-23-building-form-in-react","title":"Building Form in React"}},"staticQueryHashes":[]}